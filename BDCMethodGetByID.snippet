<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">

        <Header>
            <Title>GetByID method for BDC classes</Title>
            <Shortcut>bdcGetById</Shortcut>
            <Description>
                Code snippet for surrounding/expanding a section of code with a BDC class
            </Description>
            <Author>Abhishek Bussa</Author>
            <SnippetTypes>
                <SnippetType>SurroundsWith</SnippetType>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>

        <Snippet>
            <Declarations>
                <Literal>
                    <ID>bdcEntity</ID>
                    <ToolTip>Name of DTO</ToolTip>
                    <Default>DummyEntity</Default>
                </Literal>
                <Literal>
                    <ID>parameterName</ID>
                    <ToolTip>Replace this with name of parameter</ToolTip>
                    <Default>dummyEntity</Default>
                </Literal>
                <Literal>
                    <ID>resourceNameSpace</ID>
                    <ToolTip>Replace this with the namespace of your resource enums</ToolTip>
                    <Default>Dummy</Default>
                </Literal>
                <Literal>
                    <ID>parameterComment</ID>
                    <ToolTip>Replace this with the details of parameter </ToolTip>
                    <Default>About the parameter</Default>
                </Literal>
                <Literal>
                    <ID>methodComment</ID>
                    <Default>instance of dummyDTO</Default>
                </Literal>
                <Literal>
                    <ID>module</ID>
                    <ToolTip>Replace with the name of the current module</ToolTip>
                    <Default>Admin</Default>
                </Literal>
                <Literal>
                    <ID>returnTypeComment</ID>
                    <ToolTip>Replace with the return type comment</ToolTip>
                    <Default>Returns the added instance of DTO</Default>
                </Literal>
                <Literal>
                    <ID>bdcName</ID>
                    <ToolTip>Replace with the DTO name</ToolTip>
                    <Default>entity</Default>
                </Literal>
            </Declarations>
            <Code Language="CSharp">
                <![CDATA[ 
        /// <summary>
        /// Get $methodComment$ by ID
        /// </summary>
        /// <param name="$parameterName$">$parameterComment$</param>
        /// <returns>$returnTypeComment$</returns>
        public OperationResult<I$bdcEntity$DTO> Get$bdcEntity$ByID(int $parameterName$)
        {
            OperationResult<I$bdcEntity$DTO> result = null;
            try
            {
                I$bdcEntity$DAC $bdcName$DAC = this.CreateDAC<I$bdcEntity$DAC>();
                I$bdcEntity$DTO $bdcName$ = $bdcName$DAC.GetByID($parameterName$);
                if ($bdcName$ == null)
                {
                    result = OperationResult<I$bdcEntity$DTO>.CreateFailureResult(Module.$module$ModuleInstance.GetResource($resourceNameSpace$Resource.Messages.$resourceNameSpace$_Messages_Get$bdcEntity$ByID_Failure.ToString()));
                }
                else
                {
                    result = OperationResult<I$bdcEntity$DTO>.CreateSuccessResult($bdcName$, Module.$module$ModuleInstance.GetResource($resourceNameSpace$Resource.Messages.$resourceNameSpace$_Messages_Get$bdcEntity$ByID_Success.ToString()));
                }
            }
            catch (DACException dacEx)
            {
                result = OperationResult<I$bdcEntity$DTO>.CreateErrorResult(Common.CreateErrorMessage(dacEx.Message, dacEx.InnerException), dacEx.StackTrace);
            }
            catch (Exception ex)
            {
                Core.Instance.GetService<IExceptionHandlerService>().HandleException(ex);
                result = OperationResult<I$bdcEntity$DTO>.CreateErrorResult(Common.CreateErrorMessage(ex.Message, ex.InnerException), ex.StackTrace);
            }
            return result;
        }
       ]]>
            </Code>
        </Snippet>

    </CodeSnippet>
</CodeSnippets>